#summary Quick reference to AVR-Assembler
#labels Phase-Implementation,Draft


= Introduction =

This articel shows a table with some instructions about the AVR Assembler.
For more details check the [http://www.atmel.com/dyn/resources/prod_documents/doc0856.pdf AVR Assembler Instruction Set]


= Terminology/Nomenclature =

== Bits ==

  * if a bit is *cleared*, it means the bit is equal *zero*
  * if a bit is *set*, it means the bit is equal *one*

= Quick reference =

|| *Instruction* || *Syntax* || *Category* || *Description* || *Example* ||
|| nop || {{{nop}}} || - || =no operation; Performs a single cycle, there is nothing to do || {{{nop}}} ||
|| mov || {{{mov reg_t, reg_s}}} || register || =move; Copy the contents of register *reg_s* to register *reg_t* || {{{mov r16, r20}}} ||
|| ldi || {{{ldi reg, const}}} || register || =load immediate; Push the value of *const* into the register *reg*  || {{{ldi r16, 0xFF}}} ||
|| cbr || {{{cbr reg, mask}}} || register || =clear bits of register; Clears all bits in register *reg* which are set in *mask*. *Note:* There's a difference to *cbi*! || {{{cbr r16, 0b10101010}}} ||
|| sbr || {{{sbi reg, mask}}} || register || =set bits in registers; Sets all bits in register *reg* which are set in *mask*. This is equal to {{{ori}}}. *Note:* There's a difference to *sbi*! || {{{sbr r16, 0b01010101}}} ||
|| out || {{{out port, reg}}} || I/O || Write data containing in *reg* to ioport *port*|| {{{out PORTB, r16}}} ||
|| in || {{{in reg, port}}} || I/O || Read data from ioport *port* and push it into register *reg*|| {{{in r16, PORTC}}} ||
|| cbi || {{{cbi port, bit}}} || I/O || =clear bit; Clears the bit *bit* (0=LSB; 7=MSB) in the I/O register *port* || {{{cbi PORTB, 5}}} ||
|| sbi || {{{sbi port, bit}}} || I/O || =set bit; Sets the bit *bit* (0=LSB; 7=MSB) in the I/O register *port* || {{{sbi PORTC, 3}}} ||
|| sbic || {{{sbic port, bit}}} || I/O, flowctrl || =skip if bit is cleared; Skips the following instruction if bit *bit* (0=LSB; 7=MSB) equals 0 in the I/O register *port* || {{{sbic PINB, 0}}} ||
|| sbis || {{{sbis port, bit}}} || I/O, flowctrl || =skip if bit is set; Skipts the following instruction if bit *bit* (0=LSB; 7=MSB) is equals 1 in the I/O register *port* || {{{sbis PINB, 7}}} ||
|| rjmp || {{{rjmp label}}} || flowctrl || =relative jump; Jumps to the label *label*. (Labels are defined with {{{<labelname>:}}}) || {{{rjmp waitfor}}} ||
|| com || {{{com reg}}} || logical || =complement; Build the complement of the contents in register *reg* and store it to himself. This means to *invert* the bits _(00001111 => 11110000)_. || {{{com r18}}} ||

----

_This is just for copy&paste ;-)_
||  || {{{}}} ||  ||  || {{{}}} ||